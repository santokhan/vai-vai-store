generator client {
    provider      = "prisma-client-js"
    output        = "./generated/client"
    binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
    provider = "mongodb"
    url      = env("MONGODB_URL")
}

model User {
    id        String    @id @default(auto()) @map("_id") @db.ObjectId
    email     String    @unique
    role      String
    createdAt DateTime? @default(now())
}

model Seller {
    id         String       @id @default(auto()) @map("_id") @db.ObjectId
    name       String
    SalesEntry SalesEntry[]
    createdAt  DateTime?    @default(now())
}

model ProductType {
    id                      String                    @id @default(auto()) @map("_id") @db.ObjectId
    type                    String
    Brand                   Brand[]
    createdAt               DateTime?                 @default(now())
    StockAndroid            StockAndroid[]
    StockButton             StockButton[]
    StockAccessories        StockAccessories[]
    HistoryAndroidStock     HistoryAndroidStock[]
    HistoryButtonStock      HistoryButtonStock[]
    HistoryAccessoriesStock HistoryAccessoriesStock[]
    ReturnHistory           ReturnHistory[]
}

model Brand {
    id                      String                    @id @default(auto()) @map("_id") @db.ObjectId
    brandName               String
    productType             ProductType               @relation(fields: [productTypeId], references: [id])
    productTypeId           String                    @db.ObjectId
    Model                   Model[]
    createdAt               DateTime?                 @default(now())
    StockAndroid            StockAndroid[]
    StockButton             StockButton[]
    StockAccessories        StockAccessories[]
    HistoryAndroidStock     HistoryAndroidStock[]
    HistoryButtonStock      HistoryButtonStock[]
    HistoryAccessoriesStock HistoryAccessoriesStock[]
}

model Model {
    id                      String                    @id @default(auto()) @map("_id") @db.ObjectId
    model                   String
    brand                   Brand                     @relation(fields: [brandId], references: [id])
    brandId                 String                    @db.ObjectId
    StrockAndroid           StockAndroid[]
    StrockButton            StockButton[]
    StrockAccessories       StockAccessories[]
    HistoryAndroidStock     HistoryAndroidStock[]
    HistoryButtonStock      HistoryButtonStock[]
    HistoryAccessoriesStock HistoryAccessoriesStock[]
    createdAt               DateTime?                 @default(now())
}

// model InStock {
//     id            String      @id @default(auto()) @map("_id") @db.ObjectId
//     name          String
//     IMEI          String      @unique
//     model         Model       @relation(fields: [modelId], references: [id])
//     modelId       String      @db.ObjectId
//     brand         Brand       @relation(fields: [brandId], references: [id])
//     brandId       String      @db.ObjectId
//     productType   ProductType @relation(fields: [productTypeId], references: [id])
//     productTypeId String      @db.ObjectId
//     purchasePrice Int
//     price         Int
//     sold          Boolean     @default(false)
//     color         String
//     ram           String?
//     rom           String?
//     createdAt     DateTime?   @default(now())
// }

model StockAndroid {
    id            String      @id @default(auto()) @map("_id") @db.ObjectId
    name          String
    IMEI          String      @unique
    model         Model       @relation(fields: [modelId], references: [id])
    modelId       String      @db.ObjectId
    brand         Brand       @relation(fields: [brandId], references: [id])
    brandId       String      @db.ObjectId
    productType   ProductType @relation(fields: [productTypeId], references: [id])
    productTypeId String      @db.ObjectId
    purchasePrice Int
    sellingPrice  Int
    sold          Boolean     @default(false)
    color         String
    ram           String?
    rom           String?
    createdAt     DateTime?   @default(now())
    dealer                  Dealer?                   @relation("DealerStockAndroid", fields: [dealerId], references: [id])
    dealerId                String?                   @db.ObjectId
}

model StockButton {
    id            String      @id @default(auto()) @map("_id") @db.ObjectId
    name          String
    model         Model       @relation(fields: [modelId], references: [id])
    modelId       String      @db.ObjectId
    brand         Brand       @relation(fields: [brandId], references: [id])
    brandId       String      @db.ObjectId
    productType   ProductType @relation(fields: [productTypeId], references: [id])
    productTypeId String      @db.ObjectId
    purchasePrice Int
    sellingPrice  Int
    quantity      Int
    color         String
    createdAt     DateTime?   @default(now())
    dealer                  Dealer?                   @relation("DealerStockButton", fields: [dealerId], references: [id])
    dealerId                String?                   @db.ObjectId
}

model StockAccessories {
    id            String      @id @default(auto()) @map("_id") @db.ObjectId
    name          String
    model         Model       @relation(fields: [modelId], references: [id])
    modelId       String      @db.ObjectId
    brand         Brand       @relation(fields: [brandId], references: [id])
    brandId       String      @db.ObjectId
    productType   ProductType @relation(fields: [productTypeId], references: [id])
    productTypeId String      @db.ObjectId
    purchasePrice Int
    sellingPrice  Int
    quantity      Int
    createdAt     DateTime?   @default(now())
    dealer        Dealer?     @relation("DealerStockAccessories", fields: [dealerId], references: [id])
    dealerId      String?     @db.ObjectId
}

model Customer {
    id         String       @id @default(auto()) @map("_id") @db.ObjectId
    name       String
    email      String?
    phone      String?
    SalesEntry SalesEntry[]
    createdAt  DateTime?    @default(now())
}

model SalesEntry {
    id         String    @id @default(auto()) @map("_id") @db.ObjectId
    discount   Int
    due        Int
    dueDate    DateTime? @default(now())
    seller     Seller    @relation(fields: [sellerId], references: [id])
    sellerId   String    @db.ObjectId
    customer   Customer  @relation(fields: [customerId], references: [id])
    customerId String    @db.ObjectId
    createdAt  DateTime  @default(now())
    entity     Json
}

model ShopRent {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    amount    Int
    comment   String
    createdAt DateTime @default(now())
}

model Installment {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    amount    Int
    comment   String
    createdAt DateTime @default(now())
}

model OtherCost {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    amount    Int
    comment   String
    createdAt DateTime @default(now())
}

// History Table
model HistoryAndroidStock {
    id            String      @id @default(auto()) @map("_id") @db.ObjectId
    IMEI          String      @unique
    model         Model       @relation(fields: [modelId], references: [id])
    modelId       String      @db.ObjectId
    brand         Brand       @relation(fields: [brandId], references: [id])
    brandId       String      @db.ObjectId
    productType   ProductType @relation(fields: [productTypeId], references: [id])
    productTypeId String      @db.ObjectId
    purchasePrice Int
    sellingPrice  Int
    color         String
    ram           Int
    rom           Int
    createdAt     DateTime    @default(now())
}

model HistoryButtonStock {
    id            String      @id @default(auto()) @map("_id") @db.ObjectId
    name          String
    model         Model       @relation(fields: [modelId], references: [id])
    modelId       String      @db.ObjectId
    brand         Brand       @relation(fields: [brandId], references: [id])
    brandId       String      @db.ObjectId
    productType   ProductType @relation(fields: [productTypeId], references: [id])
    productTypeId String      @db.ObjectId
    purchasePrice Int
    sellingPrice  Int
    quantity      Int
    color         String
    createdAt     DateTime?   @default(now())
}

model HistoryAccessoriesStock {
    id            String      @id @default(auto()) @map("_id") @db.ObjectId
    model         Model       @relation(fields: [modelId], references: [id])
    modelId       String      @db.ObjectId
    brand         Brand       @relation(fields: [brandId], references: [id])
    brandId       String      @db.ObjectId
    productType   ProductType @relation(fields: [productTypeId], references: [id])
    productTypeId String      @db.ObjectId
    purchasePrice Int
    sellingPrice  Int
    quantity      Int
    createdAt     DateTime    @default(now())
}

model ReturnHistory {
    id            String      @id @default(auto()) @map("_id") @db.ObjectId
    productType   ProductType @relation(fields: [productTypeId], references: [id])
    productTypeId String      @db.ObjectId
    stockId       String      @db.ObjectId
}

model Dealer {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    name        String
    description String?
    createdAt   DateTime @default(now())

    // Optional: relation to SalesEntry or Stock if you want to track purchases
    StockAndroid     StockAndroid[]     @relation("DealerStockAndroid")
    StockButton      StockButton[]      @relation("DealerStockButton")
    StockAccessories StockAccessories[] @relation("DealerStockAccessories")
}
